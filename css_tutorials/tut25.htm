<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Position property</title>
    <style>
        .container {
            border: 2px solid black;
            background-color: khaki;
            height: 3444px;
        }

        /* CSS positions-position: Static(default)
        ,absolute,reative, fixed, sticky */
        .box {
            display: inline-block;
            border: 2px solid red;
            width: 150px;
            height: 150px;
            margin: 2px;
        }

        #box3 {
            /* relative: Relative to its normal position and 
            it leave a gap at its normal position*/
            /* position: relative; */
            /* absolute-- relative to a position of its first parent */
            /* position: absolute; */
            /* fixed- relative to the browser window */
            /* position: fixed; */
            /* right: 4px;
            bottom: 2px; */
            /* sticky-- */
            position: sticky;
            top: 3px;

            /* top: 30px;
            left: 50px; */
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="box" id="box1"></div>
        <div class="box" id="box2"></div>
        <div class="box" id="box3">Chat with us</div>
        <div class="box" id="box4"></div>
    </div>

</body>

</html>
<!-- CSS Layout - The position Property
The position property specifies the type of positioning method used for an element 
(static, relative, fixed, absolute or sticky).

The position Property
The position property specifies the type of positioning method used for an element.

There are five different position values:

static
relative
fixed
absolute
sticky
Elements are then positioned using the top, bottom, left, and right properties. 
However, these properties will not work unless the position property is set first.
 They also work differently depending on the position value.

position: static;
HTML elements are positioned static by default.

Static positioned elements are not affected by the top, bottom, left, and right properties.

An element with position: static; is not positioned in any special way; 
it is always positioned according to the normal flow of the page:

This <div> element has position: static;
Here is the CSS that is used:

Example
div.static {
  position: static;
  border: 3px solid #73AD21;
}
position: relative;
An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element
 will cause it to be adjusted away from its normal position. Other content will
  not be adjusted to fit into any gap left by the element.

This <div> element has position: relative;
Here is the CSS that is used:

Example
div.relative {
  position: relative;
  left: 30px;
  border: 3px solid #73AD21;
}
position: fixed;
An element with position: fixed; is positioned relative to the viewport, 
which means it always stays in the same place even if the page is scrolled.
 The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a gap in the page where it would normally have been located.

Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:

Example
div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73AD21;
}
This <div> element has position: fixed;
position: absolute;
An element with position: absolute; is positioned relative to the nearest 
positioned ancestor (instead of positioned relative to the viewport, like fixed).

However; if an absolute positioned element has no positioned ancestors,
 it uses the document body, and moves along with page scrolling.

Note: A "positioned" element is one whose position is anything except static.

Here is a simple example:

This <div> element has position: relative;This <div> element has position: absolute;
Here is the CSS that is used:

Example
div.relative {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
}

div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}
position: sticky;
An element with position: sticky; is positioned based on the user's
 scroll position.

A sticky element toggles between relative and fixed, depending on the
 scroll position. It is positioned relative until a given offset position
  is met in the viewport - then it "sticks" in place (like position:fixed).


Note: Internet Explorer, Edge 15 and earlier versions do not support 
sticky positioning. Safari requires a -webkit- prefix (see example below). 
You must also specify at least one of top, right, bottom or left for sticky positioning to work.

In this example, the sticky element sticks to the top of the page (top: 0), 
when you reach its scroll position.

Example
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
} -->